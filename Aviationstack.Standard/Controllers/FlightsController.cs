// <copyright file="FlightsController.cs" company="APIMatic">
// Aviationstack.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using APIMatic.Core;
using APIMatic.Core.Types;
using APIMatic.Core.Utilities;
using APIMatic.Core.Utilities.Date.Xml;
using Aviationstack.Standard;
using Aviationstack.Standard.Exceptions;
using Aviationstack.Standard.Http.Client;
using Aviationstack.Standard.Utilities;
using Newtonsoft.Json.Converters;
using System.Net.Http;

namespace Aviationstack.Standard.Controllers
{
    /// <summary>
    /// FlightsController.
    /// </summary>
    public class FlightsController : BaseController
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightsController"/> class.
        /// </summary>
        internal FlightsController(GlobalConfiguration globalConfiguration) : base(globalConfiguration) { }

        /// <summary>
        /// Retrieve real-time and historical flight data.
        /// </summary>
        /// <param name="limit">Optional parameter: Number of results to return (max 1000).</param>
        /// <param name="offset">Optional parameter: Number of results to skip.</param>
        /// <param name="flightIata">Optional parameter: IATA code of the flight.</param>
        /// <param name="flightIcao">Optional parameter: ICAO code of the flight.</param>
        /// <param name="airlineIata">Optional parameter: IATA code of the airline.</param>
        /// <param name="airlineIcao">Optional parameter: ICAO code of the airline.</param>
        /// <param name="flightNumber">Optional parameter: Flight number.</param>
        /// <param name="depIata">Optional parameter: IATA code of departure airport.</param>
        /// <param name="depIcao">Optional parameter: ICAO code of departure airport.</param>
        /// <param name="arrIata">Optional parameter: IATA code of arrival airport.</param>
        /// <param name="arrIcao">Optional parameter: ICAO code of arrival airport.</param>
        /// <param name="flightStatus">Optional parameter: Status of the flight.</param>
        /// <param name="date">Optional parameter: Date in YYYY-MM-DD format.</param>
        /// <returns>Returns the Models.FlightResponse response from the API call.</returns>
        public Models.FlightResponse GetFlights(
                int? limit = 100,
                int? offset = 0,
                string flightIata = null,
                string flightIcao = null,
                string airlineIata = null,
                string airlineIcao = null,
                string flightNumber = null,
                string depIata = null,
                string depIcao = null,
                string arrIata = null,
                string arrIcao = null,
                Models.FlightStatus2Enum? flightStatus = null,
                DateTime? date = null)
            => CoreHelper.RunTask(GetFlightsAsync(limit, offset, flightIata, flightIcao, airlineIata, airlineIcao, flightNumber, depIata, depIcao, arrIata, arrIcao, flightStatus, date));

        /// <summary>
        /// Retrieve real-time and historical flight data.
        /// </summary>
        /// <param name="limit">Optional parameter: Number of results to return (max 1000).</param>
        /// <param name="offset">Optional parameter: Number of results to skip.</param>
        /// <param name="flightIata">Optional parameter: IATA code of the flight.</param>
        /// <param name="flightIcao">Optional parameter: ICAO code of the flight.</param>
        /// <param name="airlineIata">Optional parameter: IATA code of the airline.</param>
        /// <param name="airlineIcao">Optional parameter: ICAO code of the airline.</param>
        /// <param name="flightNumber">Optional parameter: Flight number.</param>
        /// <param name="depIata">Optional parameter: IATA code of departure airport.</param>
        /// <param name="depIcao">Optional parameter: ICAO code of departure airport.</param>
        /// <param name="arrIata">Optional parameter: IATA code of arrival airport.</param>
        /// <param name="arrIcao">Optional parameter: ICAO code of arrival airport.</param>
        /// <param name="flightStatus">Optional parameter: Status of the flight.</param>
        /// <param name="date">Optional parameter: Date in YYYY-MM-DD format.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.FlightResponse response from the API call.</returns>
        public async Task<Models.FlightResponse> GetFlightsAsync(
                int? limit = 100,
                int? offset = 0,
                string flightIata = null,
                string flightIcao = null,
                string airlineIata = null,
                string airlineIcao = null,
                string flightNumber = null,
                string depIata = null,
                string depIcao = null,
                string arrIata = null,
                string arrIcao = null,
                Models.FlightStatus2Enum? flightStatus = null,
                DateTime? date = null,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.FlightResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/v1/flights")
                  .WithAuth("ApiKeyAuth")
                  .Parameters(_parameters => _parameters
                      .Query(_query => _query.Setup("limit", limit ?? 100))
                      .Query(_query => _query.Setup("offset", offset ?? 0))
                      .Query(_query => _query.Setup("flight_iata", flightIata))
                      .Query(_query => _query.Setup("flight_icao", flightIcao))
                      .Query(_query => _query.Setup("airline_iata", airlineIata))
                      .Query(_query => _query.Setup("airline_icao", airlineIcao))
                      .Query(_query => _query.Setup("flight_number", flightNumber))
                      .Query(_query => _query.Setup("dep_iata", depIata))
                      .Query(_query => _query.Setup("dep_icao", depIcao))
                      .Query(_query => _query.Setup("arr_iata", arrIata))
                      .Query(_query => _query.Setup("arr_icao", arrIcao))
                      .Query(_query => _query.Setup("flight_status", (flightStatus.HasValue) ? ApiHelper.JsonSerialize(flightStatus.Value).Trim('\"') : null))
                      .Query(_query => _query.Setup("date", date.HasValue ? date.Value.ToString("yyyy'-'MM'-'dd") : null))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("Bad request", (_reason, _context) => new ErrorResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("Unauthorized", (_reason, _context) => new ErrorResponseException(_reason, _context)))
                  .ErrorCase("429", CreateErrorCase("Rate limit exceeded", (_reason, _context) => new ErrorResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);
    }
}