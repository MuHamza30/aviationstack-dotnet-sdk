// <copyright file="FlightFutureSchedulesController.cs" company="APIMatic">
// Aviationstack.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using APIMatic.Core;
using APIMatic.Core.Types;
using APIMatic.Core.Utilities;
using APIMatic.Core.Utilities.Date.Xml;
using Aviationstack.Standard;
using Aviationstack.Standard.Exceptions;
using Aviationstack.Standard.Http.Client;
using Aviationstack.Standard.Utilities;
using Newtonsoft.Json.Converters;
using System.Net.Http;

namespace Aviationstack.Standard.Controllers
{
    /// <summary>
    /// FlightFutureSchedulesController.
    /// </summary>
    public class FlightFutureSchedulesController : BaseController
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightFutureSchedulesController"/> class.
        /// </summary>
        internal FlightFutureSchedulesController(GlobalConfiguration globalConfiguration) : base(globalConfiguration) { }

        /// <summary>
        /// Retrieve future flight schedule information for a specific airport and date.
        /// </summary>
        /// <param name="accessKey">Required parameter: Your AviationStack API access key.</param>
        /// <param name="iataCode">Required parameter: [Required] The IATA code of the airport you'd like to request data from. Example: JFK,DXB..</param>
        /// <param name="type">Required parameter: [Required] Airport schedule type. Available values: departure or arrival..</param>
        /// <param name="date">Required parameter: [Required] Filter your results by providing a flight date in the format YYYY-MM-DD..</param>
        /// <param name="limit">Optional parameter: Number of results to return.</param>
        /// <param name="offset">Optional parameter: Number of results to skip.</param>
        /// <returns>Returns the Models.FlightScheduleResponse response from the API call.</returns>
        public Models.FlightScheduleResponse GetFutureFlightSchedules(
                string accessKey,
                string iataCode,
                Models.TypeEnum type,
                DateTime date,
                int? limit = 100,
                int? offset = 0)
            => CoreHelper.RunTask(GetFutureFlightSchedulesAsync(accessKey, iataCode, type, date, limit, offset));

        /// <summary>
        /// Retrieve future flight schedule information for a specific airport and date.
        /// </summary>
        /// <param name="accessKey">Required parameter: Your AviationStack API access key.</param>
        /// <param name="iataCode">Required parameter: [Required] The IATA code of the airport you'd like to request data from. Example: JFK,DXB..</param>
        /// <param name="type">Required parameter: [Required] Airport schedule type. Available values: departure or arrival..</param>
        /// <param name="date">Required parameter: [Required] Filter your results by providing a flight date in the format YYYY-MM-DD..</param>
        /// <param name="limit">Optional parameter: Number of results to return.</param>
        /// <param name="offset">Optional parameter: Number of results to skip.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.FlightScheduleResponse response from the API call.</returns>
        public async Task<Models.FlightScheduleResponse> GetFutureFlightSchedulesAsync(
                string accessKey,
                string iataCode,
                Models.TypeEnum type,
                DateTime date,
                int? limit = 100,
                int? offset = 0,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.FlightScheduleResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/v1/flights/{iata_code}/{type}/{date}")
                  .WithAuth("ApiKeyAuth")
                  .Parameters(_parameters => _parameters
                      .Query(_query => _query.Setup("access_key", accessKey))
                      .Template(_template => _template.Setup("iata_code", iataCode))
                      .Template(_template => _template.Setup("type", ApiHelper.JsonSerialize(type).Trim('\"')))
                      .Template(_template => _template.Setup("date", date.ToString("yyyy'-'MM'-'dd")))
                      .Query(_query => _query.Setup("limit", limit ?? 100))
                      .Query(_query => _query.Setup("offset", offset ?? 0))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("Bad request", (_reason, _context) => new ErrorResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("Unauthorized", (_reason, _context) => new ErrorResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);
    }
}