// <copyright file="CountriesController.cs" company="APIMatic">
// Aviationstack.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using APIMatic.Core;
using APIMatic.Core.Types;
using APIMatic.Core.Utilities;
using APIMatic.Core.Utilities.Date.Xml;
using Aviationstack.Standard;
using Aviationstack.Standard.Exceptions;
using Aviationstack.Standard.Http.Client;
using Aviationstack.Standard.Utilities;
using Newtonsoft.Json.Converters;
using System.Net.Http;

namespace Aviationstack.Standard.Controllers
{
    /// <summary>
    /// CountriesController.
    /// </summary>
    public class CountriesController : BaseController
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CountriesController"/> class.
        /// </summary>
        internal CountriesController(GlobalConfiguration globalConfiguration) : base(globalConfiguration) { }

        /// <summary>
        /// Retrieve country data.
        /// </summary>
        /// <param name="accessKey">Required parameter: Your AviationStack API access key.</param>
        /// <param name="limit">Optional parameter: Number of results to return.</param>
        /// <param name="offset">Optional parameter: Number of results to skip.</param>
        /// <param name="countryCode">Optional parameter: Country code.</param>
        /// <param name="countryName">Optional parameter: Country name.</param>
        /// <returns>Returns the Models.CountryResponse response from the API call.</returns>
        public Models.CountryResponse GetCountries(
                string accessKey,
                int? limit = 100,
                int? offset = 0,
                string countryCode = null,
                string countryName = null)
            => CoreHelper.RunTask(GetCountriesAsync(accessKey, limit, offset, countryCode, countryName));

        /// <summary>
        /// Retrieve country data.
        /// </summary>
        /// <param name="accessKey">Required parameter: Your AviationStack API access key.</param>
        /// <param name="limit">Optional parameter: Number of results to return.</param>
        /// <param name="offset">Optional parameter: Number of results to skip.</param>
        /// <param name="countryCode">Optional parameter: Country code.</param>
        /// <param name="countryName">Optional parameter: Country name.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the Models.CountryResponse response from the API call.</returns>
        public async Task<Models.CountryResponse> GetCountriesAsync(
                string accessKey,
                int? limit = 100,
                int? offset = 0,
                string countryCode = null,
                string countryName = null,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<Models.CountryResponse>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/v1/countries")
                  .WithAuth("ApiKeyAuth")
                  .Parameters(_parameters => _parameters
                      .Query(_query => _query.Setup("access_key", accessKey))
                      .Query(_query => _query.Setup("limit", limit ?? 100))
                      .Query(_query => _query.Setup("offset", offset ?? 0))
                      .Query(_query => _query.Setup("country_code", countryCode))
                      .Query(_query => _query.Setup("country_name", countryName))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .ErrorCase("400", CreateErrorCase("Bad request", (_reason, _context) => new ErrorResponseException(_reason, _context)))
                  .ErrorCase("401", CreateErrorCase("Unauthorized", (_reason, _context) => new ErrorResponseException(_reason, _context))))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);
    }
}