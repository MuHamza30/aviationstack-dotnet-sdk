// <copyright file="LiveInfo.cs" company="APIMatic">
// Aviationstack.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using Aviationstack.Standard;
using Aviationstack.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Aviationstack.Standard.Models
{
    /// <summary>
    /// LiveInfo.
    /// </summary>
    public class LiveInfo
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveInfo"/> class.
        /// </summary>
        public LiveInfo()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiveInfo"/> class.
        /// </summary>
        /// <param name="updated">updated.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="altitude">altitude.</param>
        /// <param name="direction">direction.</param>
        /// <param name="speedHorizontal">speed_horizontal.</param>
        /// <param name="speedVertical">speed_vertical.</param>
        /// <param name="isGround">is_ground.</param>
        public LiveInfo(
            DateTime? updated = null,
            double? latitude = null,
            double? longitude = null,
            double? altitude = null,
            double? direction = null,
            double? speedHorizontal = null,
            double? speedVertical = null,
            bool? isGround = null)
        {
            this.Updated = updated;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Altitude = altitude;
            this.Direction = direction;
            this.SpeedHorizontal = speedHorizontal;
            this.SpeedVertical = speedVertical;
            this.IsGround = isGround;
        }

        /// <summary>
        /// Last update time
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("updated", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Current latitude
        /// </summary>
        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Current longitude
        /// </summary>
        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Current altitude
        /// </summary>
        [JsonProperty("altitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Altitude { get; set; }

        /// <summary>
        /// Current direction
        /// </summary>
        [JsonProperty("direction", NullValueHandling = NullValueHandling.Ignore)]
        public double? Direction { get; set; }

        /// <summary>
        /// Horizontal speed
        /// </summary>
        [JsonProperty("speed_horizontal", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedHorizontal { get; set; }

        /// <summary>
        /// Vertical speed
        /// </summary>
        [JsonProperty("speed_vertical", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpeedVertical { get; set; }

        /// <summary>
        /// Whether aircraft is on ground
        /// </summary>
        [JsonProperty("is_ground", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsGround { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"LiveInfo : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is LiveInfo other &&
                (this.Updated == null && other.Updated == null ||
                 this.Updated?.Equals(other.Updated) == true) &&
                (this.Latitude == null && other.Latitude == null ||
                 this.Latitude?.Equals(other.Latitude) == true) &&
                (this.Longitude == null && other.Longitude == null ||
                 this.Longitude?.Equals(other.Longitude) == true) &&
                (this.Altitude == null && other.Altitude == null ||
                 this.Altitude?.Equals(other.Altitude) == true) &&
                (this.Direction == null && other.Direction == null ||
                 this.Direction?.Equals(other.Direction) == true) &&
                (this.SpeedHorizontal == null && other.SpeedHorizontal == null ||
                 this.SpeedHorizontal?.Equals(other.SpeedHorizontal) == true) &&
                (this.SpeedVertical == null && other.SpeedVertical == null ||
                 this.SpeedVertical?.Equals(other.SpeedVertical) == true) &&
                (this.IsGround == null && other.IsGround == null ||
                 this.IsGround?.Equals(other.IsGround) == true);
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Updated = {(this.Updated == null ? "null" : this.Updated.ToString())}");
            toStringOutput.Add($"Latitude = {(this.Latitude == null ? "null" : this.Latitude.ToString())}");
            toStringOutput.Add($"Longitude = {(this.Longitude == null ? "null" : this.Longitude.ToString())}");
            toStringOutput.Add($"Altitude = {(this.Altitude == null ? "null" : this.Altitude.ToString())}");
            toStringOutput.Add($"Direction = {(this.Direction == null ? "null" : this.Direction.ToString())}");
            toStringOutput.Add($"SpeedHorizontal = {(this.SpeedHorizontal == null ? "null" : this.SpeedHorizontal.ToString())}");
            toStringOutput.Add($"SpeedVertical = {(this.SpeedVertical == null ? "null" : this.SpeedVertical.ToString())}");
            toStringOutput.Add($"IsGround = {(this.IsGround == null ? "null" : this.IsGround.ToString())}");
        }
    }
}