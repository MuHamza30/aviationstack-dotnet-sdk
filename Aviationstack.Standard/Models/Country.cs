// <copyright file="Country.cs" company="APIMatic">
// Aviationstack.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using Aviationstack.Standard;
using Aviationstack.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Aviationstack.Standard.Models
{
    /// <summary>
    /// Country.
    /// </summary>
    public class Country
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Country"/> class.
        /// </summary>
        public Country()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Country"/> class.
        /// </summary>
        /// <param name="countryName">country_name.</param>
        /// <param name="countryCode">country_code.</param>
        /// <param name="countryIso2">country_iso2.</param>
        /// <param name="countryIso3">country_iso3.</param>
        public Country(
            string countryName = null,
            string countryCode = null,
            string countryIso2 = null,
            string countryIso3 = null)
        {
            this.CountryName = countryName;
            this.CountryCode = countryCode;
            this.CountryIso2 = countryIso2;
            this.CountryIso3 = countryIso3;
        }

        /// <summary>
        /// Name of the country
        /// </summary>
        [JsonProperty("country_name", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryName { get; set; }

        /// <summary>
        /// Code of the country
        /// </summary>
        [JsonProperty("country_code", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        /// <summary>
        /// ISO 2-letter country code
        /// </summary>
        [JsonProperty("country_iso2", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryIso2 { get; set; }

        /// <summary>
        /// ISO 3-letter country code
        /// </summary>
        [JsonProperty("country_iso3", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryIso3 { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"Country : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is Country other &&
                (this.CountryName == null && other.CountryName == null ||
                 this.CountryName?.Equals(other.CountryName) == true) &&
                (this.CountryCode == null && other.CountryCode == null ||
                 this.CountryCode?.Equals(other.CountryCode) == true) &&
                (this.CountryIso2 == null && other.CountryIso2 == null ||
                 this.CountryIso2?.Equals(other.CountryIso2) == true) &&
                (this.CountryIso3 == null && other.CountryIso3 == null ||
                 this.CountryIso3?.Equals(other.CountryIso3) == true);
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"CountryName = {this.CountryName ?? "null"}");
            toStringOutput.Add($"CountryCode = {this.CountryCode ?? "null"}");
            toStringOutput.Add($"CountryIso2 = {this.CountryIso2 ?? "null"}");
            toStringOutput.Add($"CountryIso3 = {this.CountryIso3 ?? "null"}");
        }
    }
}