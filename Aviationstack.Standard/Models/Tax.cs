// <copyright file="Tax.cs" company="APIMatic">
// Aviationstack.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using Aviationstack.Standard;
using Aviationstack.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Aviationstack.Standard.Models
{
    /// <summary>
    /// Tax.
    /// </summary>
    public class Tax
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tax"/> class.
        /// </summary>
        public Tax()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Tax"/> class.
        /// </summary>
        /// <param name="iataCode">iata_code.</param>
        /// <param name="taxName">tax_name.</param>
        /// <param name="taxCode">tax_code.</param>
        /// <param name="countryCode">country_code.</param>
        /// <param name="countryName">country_name.</param>
        public Tax(
            string iataCode = null,
            string taxName = null,
            string taxCode = null,
            string countryCode = null,
            string countryName = null)
        {
            this.IataCode = iataCode;
            this.TaxName = taxName;
            this.TaxCode = taxCode;
            this.CountryCode = countryCode;
            this.CountryName = countryName;
        }

        /// <summary>
        /// IATA code
        /// </summary>
        [JsonProperty("iata_code", NullValueHandling = NullValueHandling.Ignore)]
        public string IataCode { get; set; }

        /// <summary>
        /// Name of the tax
        /// </summary>
        [JsonProperty("tax_name", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxName { get; set; }

        /// <summary>
        /// Code of the tax
        /// </summary>
        [JsonProperty("tax_code", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxCode { get; set; }

        /// <summary>
        /// Country code
        /// </summary>
        [JsonProperty("country_code", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Country name
        /// </summary>
        [JsonProperty("country_name", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryName { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"Tax : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is Tax other &&
                (this.IataCode == null && other.IataCode == null ||
                 this.IataCode?.Equals(other.IataCode) == true) &&
                (this.TaxName == null && other.TaxName == null ||
                 this.TaxName?.Equals(other.TaxName) == true) &&
                (this.TaxCode == null && other.TaxCode == null ||
                 this.TaxCode?.Equals(other.TaxCode) == true) &&
                (this.CountryCode == null && other.CountryCode == null ||
                 this.CountryCode?.Equals(other.CountryCode) == true) &&
                (this.CountryName == null && other.CountryName == null ||
                 this.CountryName?.Equals(other.CountryName) == true);
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"IataCode = {this.IataCode ?? "null"}");
            toStringOutput.Add($"TaxName = {this.TaxName ?? "null"}");
            toStringOutput.Add($"TaxCode = {this.TaxCode ?? "null"}");
            toStringOutput.Add($"CountryCode = {this.CountryCode ?? "null"}");
            toStringOutput.Add($"CountryName = {this.CountryName ?? "null"}");
        }
    }
}