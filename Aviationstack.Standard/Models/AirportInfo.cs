// <copyright file="AirportInfo.cs" company="APIMatic">
// Aviationstack.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using Aviationstack.Standard;
using Aviationstack.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Aviationstack.Standard.Models
{
    /// <summary>
    /// AirportInfo.
    /// </summary>
    public class AirportInfo
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AirportInfo"/> class.
        /// </summary>
        public AirportInfo()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AirportInfo"/> class.
        /// </summary>
        /// <param name="airport">airport.</param>
        /// <param name="timezone">timezone.</param>
        /// <param name="iata">iata.</param>
        /// <param name="icao">icao.</param>
        /// <param name="terminal">terminal.</param>
        /// <param name="gate">gate.</param>
        /// <param name="delay">delay.</param>
        /// <param name="scheduled">scheduled.</param>
        /// <param name="estimated">estimated.</param>
        /// <param name="actual">actual.</param>
        /// <param name="estimatedRunway">estimated_runway.</param>
        /// <param name="actualRunway">actual_runway.</param>
        public AirportInfo(
            string airport = null,
            string timezone = null,
            string iata = null,
            string icao = null,
            string terminal = null,
            string gate = null,
            int? delay = null,
            DateTime? scheduled = null,
            DateTime? estimated = null,
            DateTime? actual = null,
            DateTime? estimatedRunway = null,
            DateTime? actualRunway = null)
        {
            this.Airport = airport;
            this.Timezone = timezone;
            this.Iata = iata;
            this.Icao = icao;
            this.Terminal = terminal;
            this.Gate = gate;
            this.Delay = delay;
            this.Scheduled = scheduled;
            this.Estimated = estimated;
            this.Actual = actual;
            this.EstimatedRunway = estimatedRunway;
            this.ActualRunway = actualRunway;
        }

        /// <summary>
        /// Airport name
        /// </summary>
        [JsonProperty("airport", NullValueHandling = NullValueHandling.Ignore)]
        public string Airport { get; set; }

        /// <summary>
        /// Timezone
        /// </summary>
        [JsonProperty("timezone", NullValueHandling = NullValueHandling.Ignore)]
        public string Timezone { get; set; }

        /// <summary>
        /// IATA code
        /// </summary>
        [JsonProperty("iata", NullValueHandling = NullValueHandling.Ignore)]
        public string Iata { get; set; }

        /// <summary>
        /// ICAO code
        /// </summary>
        [JsonProperty("icao", NullValueHandling = NullValueHandling.Ignore)]
        public string Icao { get; set; }

        /// <summary>
        /// Terminal
        /// </summary>
        [JsonProperty("terminal", NullValueHandling = NullValueHandling.Ignore)]
        public string Terminal { get; set; }

        /// <summary>
        /// Gate
        /// </summary>
        [JsonProperty("gate", NullValueHandling = NullValueHandling.Ignore)]
        public string Gate { get; set; }

        /// <summary>
        /// Delay in minutes
        /// </summary>
        [JsonProperty("delay", NullValueHandling = NullValueHandling.Ignore)]
        public int? Delay { get; set; }

        /// <summary>
        /// Scheduled time
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("scheduled", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Scheduled { get; set; }

        /// <summary>
        /// Estimated time
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("estimated", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Estimated { get; set; }

        /// <summary>
        /// Actual time
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("actual", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Actual { get; set; }

        /// <summary>
        /// Estimated runway time
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("estimated_runway", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? EstimatedRunway { get; set; }

        /// <summary>
        /// Actual runway time
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("actual_runway", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? ActualRunway { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"AirportInfo : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is AirportInfo other &&
                (this.Airport == null && other.Airport == null ||
                 this.Airport?.Equals(other.Airport) == true) &&
                (this.Timezone == null && other.Timezone == null ||
                 this.Timezone?.Equals(other.Timezone) == true) &&
                (this.Iata == null && other.Iata == null ||
                 this.Iata?.Equals(other.Iata) == true) &&
                (this.Icao == null && other.Icao == null ||
                 this.Icao?.Equals(other.Icao) == true) &&
                (this.Terminal == null && other.Terminal == null ||
                 this.Terminal?.Equals(other.Terminal) == true) &&
                (this.Gate == null && other.Gate == null ||
                 this.Gate?.Equals(other.Gate) == true) &&
                (this.Delay == null && other.Delay == null ||
                 this.Delay?.Equals(other.Delay) == true) &&
                (this.Scheduled == null && other.Scheduled == null ||
                 this.Scheduled?.Equals(other.Scheduled) == true) &&
                (this.Estimated == null && other.Estimated == null ||
                 this.Estimated?.Equals(other.Estimated) == true) &&
                (this.Actual == null && other.Actual == null ||
                 this.Actual?.Equals(other.Actual) == true) &&
                (this.EstimatedRunway == null && other.EstimatedRunway == null ||
                 this.EstimatedRunway?.Equals(other.EstimatedRunway) == true) &&
                (this.ActualRunway == null && other.ActualRunway == null ||
                 this.ActualRunway?.Equals(other.ActualRunway) == true);
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Airport = {this.Airport ?? "null"}");
            toStringOutput.Add($"Timezone = {this.Timezone ?? "null"}");
            toStringOutput.Add($"Iata = {this.Iata ?? "null"}");
            toStringOutput.Add($"Icao = {this.Icao ?? "null"}");
            toStringOutput.Add($"Terminal = {this.Terminal ?? "null"}");
            toStringOutput.Add($"Gate = {this.Gate ?? "null"}");
            toStringOutput.Add($"Delay = {(this.Delay == null ? "null" : this.Delay.ToString())}");
            toStringOutput.Add($"Scheduled = {(this.Scheduled == null ? "null" : this.Scheduled.ToString())}");
            toStringOutput.Add($"Estimated = {(this.Estimated == null ? "null" : this.Estimated.ToString())}");
            toStringOutput.Add($"Actual = {(this.Actual == null ? "null" : this.Actual.ToString())}");
            toStringOutput.Add($"EstimatedRunway = {(this.EstimatedRunway == null ? "null" : this.EstimatedRunway.ToString())}");
            toStringOutput.Add($"ActualRunway = {(this.ActualRunway == null ? "null" : this.ActualRunway.ToString())}");
        }
    }
}