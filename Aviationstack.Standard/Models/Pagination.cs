// <copyright file="Pagination.cs" company="APIMatic">
// Aviationstack.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using Aviationstack.Standard;
using Aviationstack.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Aviationstack.Standard.Models
{
    /// <summary>
    /// Pagination.
    /// </summary>
    public class Pagination
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Pagination"/> class.
        /// </summary>
        public Pagination()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Pagination"/> class.
        /// </summary>
        /// <param name="limit">limit.</param>
        /// <param name="offset">offset.</param>
        /// <param name="count">count.</param>
        /// <param name="total">total.</param>
        public Pagination(
            int limit,
            int offset,
            int count,
            int total)
        {
            this.Limit = limit;
            this.Offset = offset;
            this.Count = count;
            this.Total = total;
        }

        /// <summary>
        /// Number of results per page
        /// </summary>
        [JsonProperty("limit")]
        public int Limit { get; set; }

        /// <summary>
        /// Number of results skipped
        /// </summary>
        [JsonProperty("offset")]
        public int Offset { get; set; }

        /// <summary>
        /// Total number of results
        /// </summary>
        [JsonProperty("count")]
        public int Count { get; set; }

        /// <summary>
        /// Total number of available results
        /// </summary>
        [JsonProperty("total")]
        public int Total { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"Pagination : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is Pagination other &&
                (this.Limit.Equals(other.Limit)) &&
                (this.Offset.Equals(other.Offset)) &&
                (this.Count.Equals(other.Count)) &&
                (this.Total.Equals(other.Total));
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Limit = {this.Limit}");
            toStringOutput.Add($"Offset = {this.Offset}");
            toStringOutput.Add($"Count = {this.Count}");
            toStringOutput.Add($"Total = {this.Total}");
        }
    }
}