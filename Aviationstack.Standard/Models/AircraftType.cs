// <copyright file="AircraftType.cs" company="APIMatic">
// Aviationstack.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using Aviationstack.Standard;
using Aviationstack.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Aviationstack.Standard.Models
{
    /// <summary>
    /// AircraftType.
    /// </summary>
    public class AircraftType
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AircraftType"/> class.
        /// </summary>
        public AircraftType()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AircraftType"/> class.
        /// </summary>
        /// <param name="iataCode">iata_code.</param>
        /// <param name="aircraftName">aircraft_name.</param>
        public AircraftType(
            string iataCode = null,
            string aircraftName = null)
        {
            this.IataCode = iataCode;
            this.AircraftName = aircraftName;
        }

        /// <summary>
        /// IATA code of the aircraft type
        /// </summary>
        [JsonProperty("iata_code", NullValueHandling = NullValueHandling.Ignore)]
        public string IataCode { get; set; }

        /// <summary>
        /// Name of the aircraft type
        /// </summary>
        [JsonProperty("aircraft_name", NullValueHandling = NullValueHandling.Ignore)]
        public string AircraftName { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"AircraftType : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is AircraftType other &&
                (this.IataCode == null && other.IataCode == null ||
                 this.IataCode?.Equals(other.IataCode) == true) &&
                (this.AircraftName == null && other.AircraftName == null ||
                 this.AircraftName?.Equals(other.AircraftName) == true);
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"IataCode = {this.IataCode ?? "null"}");
            toStringOutput.Add($"AircraftName = {this.AircraftName ?? "null"}");
        }
    }
}