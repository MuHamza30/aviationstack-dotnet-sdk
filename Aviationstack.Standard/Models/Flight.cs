// <copyright file="Flight.cs" company="APIMatic">
// Aviationstack.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using Aviationstack.Standard;
using Aviationstack.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Aviationstack.Standard.Models
{
    /// <summary>
    /// Flight.
    /// </summary>
    public class Flight
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Flight"/> class.
        /// </summary>
        public Flight()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Flight"/> class.
        /// </summary>
        /// <param name="flightDate">flight_date.</param>
        /// <param name="flightStatus">flight_status.</param>
        /// <param name="departure">departure.</param>
        /// <param name="arrival">arrival.</param>
        /// <param name="airline">airline.</param>
        /// <param name="flightProp">flight.</param>
        /// <param name="aircraft">aircraft.</param>
        /// <param name="live">live.</param>
        public Flight(
            DateTime? flightDate = null,
            Models.FlightStatusEnum? flightStatus = null,
            Models.AirportInfo departure = null,
            Models.AirportInfo arrival = null,
            Models.AirlineInfo airline = null,
            Models.FlightInfo flightProp = null,
            Models.AircraftInfo aircraft = null,
            Models.LiveInfo live = null)
        {
            this.FlightDate = flightDate;
            this.FlightStatus = flightStatus;
            this.Departure = departure;
            this.Arrival = arrival;
            this.Airline = airline;
            this.FlightProp = flightProp;
            this.Aircraft = aircraft;
            this.Live = live;
        }

        /// <summary>
        /// Date of the flight
        /// </summary>
        [JsonConverter(typeof(CustomDateTimeConverter), "yyyy'-'MM'-'dd")]
        [JsonProperty("flight_date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? FlightDate { get; set; }

        /// <summary>
        /// Status of the flight
        /// </summary>
        [JsonProperty("flight_status", NullValueHandling = NullValueHandling.Ignore)]
        public Models.FlightStatusEnum? FlightStatus { get; set; }

        /// <summary>
        /// Gets or sets Departure.
        /// </summary>
        [JsonProperty("departure", NullValueHandling = NullValueHandling.Ignore)]
        public Models.AirportInfo Departure { get; set; }

        /// <summary>
        /// Gets or sets Arrival.
        /// </summary>
        [JsonProperty("arrival", NullValueHandling = NullValueHandling.Ignore)]
        public Models.AirportInfo Arrival { get; set; }

        /// <summary>
        /// Gets or sets Airline.
        /// </summary>
        [JsonProperty("airline", NullValueHandling = NullValueHandling.Ignore)]
        public Models.AirlineInfo Airline { get; set; }

        /// <summary>
        /// Gets or sets FlightProp.
        /// </summary>
        [JsonProperty("flight", NullValueHandling = NullValueHandling.Ignore)]
        public Models.FlightInfo FlightProp { get; set; }

        /// <summary>
        /// Gets or sets Aircraft.
        /// </summary>
        [JsonProperty("aircraft", NullValueHandling = NullValueHandling.Ignore)]
        public Models.AircraftInfo Aircraft { get; set; }

        /// <summary>
        /// Gets or sets Live.
        /// </summary>
        [JsonProperty("live", NullValueHandling = NullValueHandling.Ignore)]
        public Models.LiveInfo Live { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"Flight : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is Flight other &&
                (this.FlightDate == null && other.FlightDate == null ||
                 this.FlightDate?.Equals(other.FlightDate) == true) &&
                (this.FlightStatus == null && other.FlightStatus == null ||
                 this.FlightStatus?.Equals(other.FlightStatus) == true) &&
                (this.Departure == null && other.Departure == null ||
                 this.Departure?.Equals(other.Departure) == true) &&
                (this.Arrival == null && other.Arrival == null ||
                 this.Arrival?.Equals(other.Arrival) == true) &&
                (this.Airline == null && other.Airline == null ||
                 this.Airline?.Equals(other.Airline) == true) &&
                (this.FlightProp == null && other.FlightProp == null ||
                 this.FlightProp?.Equals(other.FlightProp) == true) &&
                (this.Aircraft == null && other.Aircraft == null ||
                 this.Aircraft?.Equals(other.Aircraft) == true) &&
                (this.Live == null && other.Live == null ||
                 this.Live?.Equals(other.Live) == true);
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"FlightDate = {(this.FlightDate == null ? "null" : this.FlightDate.ToString())}");
            toStringOutput.Add($"FlightStatus = {(this.FlightStatus == null ? "null" : this.FlightStatus.ToString())}");
            toStringOutput.Add($"Departure = {(this.Departure == null ? "null" : this.Departure.ToString())}");
            toStringOutput.Add($"Arrival = {(this.Arrival == null ? "null" : this.Arrival.ToString())}");
            toStringOutput.Add($"Airline = {(this.Airline == null ? "null" : this.Airline.ToString())}");
            toStringOutput.Add($"FlightProp = {(this.FlightProp == null ? "null" : this.FlightProp.ToString())}");
            toStringOutput.Add($"Aircraft = {(this.Aircraft == null ? "null" : this.Aircraft.ToString())}");
            toStringOutput.Add($"Live = {(this.Live == null ? "null" : this.Live.ToString())}");
        }
    }
}