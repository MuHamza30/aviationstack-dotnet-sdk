// <copyright file="Airplane.cs" company="APIMatic">
// Aviationstack.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMatic.Core.Utilities.Converters;
using Aviationstack.Standard;
using Aviationstack.Standard.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Aviationstack.Standard.Models
{
    /// <summary>
    /// Airplane.
    /// </summary>
    public class Airplane
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Airplane"/> class.
        /// </summary>
        public Airplane()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Airplane"/> class.
        /// </summary>
        /// <param name="registrationNumber">registration_number.</param>
        /// <param name="productionLine">production_line.</param>
        /// <param name="iataTypeCode">iata_type_code.</param>
        /// <param name="modelName">model_name.</param>
        /// <param name="modelCode">model_code.</param>
        /// <param name="ownerAirlineName">owner_airline_name.</param>
        /// <param name="ownerAirlineCode">owner_airline_code.</param>
        /// <param name="ownerAirlineCountryCode">owner_airline_country_code.</param>
        /// <param name="ownerAirlineCountryName">owner_airline_country_name.</param>
        /// <param name="serialNumber">serial_number.</param>
        /// <param name="engineModel">engine_model.</param>
        /// <param name="engineCount">engine_count.</param>
        /// <param name="built">built.</param>
        public Airplane(
            string registrationNumber = null,
            string productionLine = null,
            string iataTypeCode = null,
            string modelName = null,
            string modelCode = null,
            string ownerAirlineName = null,
            string ownerAirlineCode = null,
            string ownerAirlineCountryCode = null,
            string ownerAirlineCountryName = null,
            string serialNumber = null,
            string engineModel = null,
            string engineCount = null,
            string built = null)
        {
            this.RegistrationNumber = registrationNumber;
            this.ProductionLine = productionLine;
            this.IataTypeCode = iataTypeCode;
            this.ModelName = modelName;
            this.ModelCode = modelCode;
            this.OwnerAirlineName = ownerAirlineName;
            this.OwnerAirlineCode = ownerAirlineCode;
            this.OwnerAirlineCountryCode = ownerAirlineCountryCode;
            this.OwnerAirlineCountryName = ownerAirlineCountryName;
            this.SerialNumber = serialNumber;
            this.EngineModel = engineModel;
            this.EngineCount = engineCount;
            this.Built = built;
        }

        /// <summary>
        /// Aircraft registration number
        /// </summary>
        [JsonProperty("registration_number", NullValueHandling = NullValueHandling.Ignore)]
        public string RegistrationNumber { get; set; }

        /// <summary>
        /// Production line
        /// </summary>
        [JsonProperty("production_line", NullValueHandling = NullValueHandling.Ignore)]
        public string ProductionLine { get; set; }

        /// <summary>
        /// IATA type code
        /// </summary>
        [JsonProperty("iata_type_code", NullValueHandling = NullValueHandling.Ignore)]
        public string IataTypeCode { get; set; }

        /// <summary>
        /// Model name
        /// </summary>
        [JsonProperty("model_name", NullValueHandling = NullValueHandling.Ignore)]
        public string ModelName { get; set; }

        /// <summary>
        /// Model code
        /// </summary>
        [JsonProperty("model_code", NullValueHandling = NullValueHandling.Ignore)]
        public string ModelCode { get; set; }

        /// <summary>
        /// Owner airline name
        /// </summary>
        [JsonProperty("owner_airline_name", NullValueHandling = NullValueHandling.Ignore)]
        public string OwnerAirlineName { get; set; }

        /// <summary>
        /// Owner airline code
        /// </summary>
        [JsonProperty("owner_airline_code", NullValueHandling = NullValueHandling.Ignore)]
        public string OwnerAirlineCode { get; set; }

        /// <summary>
        /// Owner airline country code
        /// </summary>
        [JsonProperty("owner_airline_country_code", NullValueHandling = NullValueHandling.Ignore)]
        public string OwnerAirlineCountryCode { get; set; }

        /// <summary>
        /// Owner airline country name
        /// </summary>
        [JsonProperty("owner_airline_country_name", NullValueHandling = NullValueHandling.Ignore)]
        public string OwnerAirlineCountryName { get; set; }

        /// <summary>
        /// Serial number
        /// </summary>
        [JsonProperty("serial_number", NullValueHandling = NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Engine model
        /// </summary>
        [JsonProperty("engine_model", NullValueHandling = NullValueHandling.Ignore)]
        public string EngineModel { get; set; }

        /// <summary>
        /// Number of engines
        /// </summary>
        [JsonProperty("engine_count", NullValueHandling = NullValueHandling.Ignore)]
        public string EngineCount { get; set; }

        /// <summary>
        /// Build date
        /// </summary>
        [JsonProperty("built", NullValueHandling = NullValueHandling.Ignore)]
        public string Built { get; set; }

        /// <inheritdoc/>
        public override string ToString()
        {
            var toStringOutput = new List<string>();
            this.ToString(toStringOutput);
            return $"Airplane : ({string.Join(", ", toStringOutput)})";
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;

            return obj is Airplane other &&
                (this.RegistrationNumber == null && other.RegistrationNumber == null ||
                 this.RegistrationNumber?.Equals(other.RegistrationNumber) == true) &&
                (this.ProductionLine == null && other.ProductionLine == null ||
                 this.ProductionLine?.Equals(other.ProductionLine) == true) &&
                (this.IataTypeCode == null && other.IataTypeCode == null ||
                 this.IataTypeCode?.Equals(other.IataTypeCode) == true) &&
                (this.ModelName == null && other.ModelName == null ||
                 this.ModelName?.Equals(other.ModelName) == true) &&
                (this.ModelCode == null && other.ModelCode == null ||
                 this.ModelCode?.Equals(other.ModelCode) == true) &&
                (this.OwnerAirlineName == null && other.OwnerAirlineName == null ||
                 this.OwnerAirlineName?.Equals(other.OwnerAirlineName) == true) &&
                (this.OwnerAirlineCode == null && other.OwnerAirlineCode == null ||
                 this.OwnerAirlineCode?.Equals(other.OwnerAirlineCode) == true) &&
                (this.OwnerAirlineCountryCode == null && other.OwnerAirlineCountryCode == null ||
                 this.OwnerAirlineCountryCode?.Equals(other.OwnerAirlineCountryCode) == true) &&
                (this.OwnerAirlineCountryName == null && other.OwnerAirlineCountryName == null ||
                 this.OwnerAirlineCountryName?.Equals(other.OwnerAirlineCountryName) == true) &&
                (this.SerialNumber == null && other.SerialNumber == null ||
                 this.SerialNumber?.Equals(other.SerialNumber) == true) &&
                (this.EngineModel == null && other.EngineModel == null ||
                 this.EngineModel?.Equals(other.EngineModel) == true) &&
                (this.EngineCount == null && other.EngineCount == null ||
                 this.EngineCount?.Equals(other.EngineCount) == true) &&
                (this.Built == null && other.Built == null ||
                 this.Built?.Equals(other.Built) == true);
        }

        /// <summary>
        /// ToString overload.
        /// </summary>
        /// <param name="toStringOutput">List of strings.</param>
        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"RegistrationNumber = {this.RegistrationNumber ?? "null"}");
            toStringOutput.Add($"ProductionLine = {this.ProductionLine ?? "null"}");
            toStringOutput.Add($"IataTypeCode = {this.IataTypeCode ?? "null"}");
            toStringOutput.Add($"ModelName = {this.ModelName ?? "null"}");
            toStringOutput.Add($"ModelCode = {this.ModelCode ?? "null"}");
            toStringOutput.Add($"OwnerAirlineName = {this.OwnerAirlineName ?? "null"}");
            toStringOutput.Add($"OwnerAirlineCode = {this.OwnerAirlineCode ?? "null"}");
            toStringOutput.Add($"OwnerAirlineCountryCode = {this.OwnerAirlineCountryCode ?? "null"}");
            toStringOutput.Add($"OwnerAirlineCountryName = {this.OwnerAirlineCountryName ?? "null"}");
            toStringOutput.Add($"SerialNumber = {this.SerialNumber ?? "null"}");
            toStringOutput.Add($"EngineModel = {this.EngineModel ?? "null"}");
            toStringOutput.Add($"EngineCount = {this.EngineCount ?? "null"}");
            toStringOutput.Add($"Built = {this.Built ?? "null"}");
        }
    }
}